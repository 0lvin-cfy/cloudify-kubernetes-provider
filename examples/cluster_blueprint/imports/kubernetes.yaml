tosca_definitions_version: cloudify_dsl_1_3

imports:
  - monitoring.yaml

inputs:

  labels:
    default: {}

  cfy_tenant:
    type: string
    default: { get_secret: cfy_tenant }

  cfy_password:
    type: string
    default: { get_secret: cfy_password }

  cfy_user:
    type: string
    default: { get_secret: cfy_user }

plugins:

  cloudify_node_drop:
    executor: central_deployment_agent
    source: cloudify_node_drop

workflows:

  delete:
    mapping: cloudify_node_drop.cloudify_drop.workflow.delete
    parameters:
      scalable_entity_name:
        description: >
          Which node/group to scale. Note that the parameter specified
          should denote the node/group name and NOT the node/group instance id.
      delta:
        description: >
            How many node/group instances should be added/removed.
            A positive number denotes increase of instances.
            A negative number denotes decrease of instances.
        default: 1
        type: integer
      scale_compute:
        description: >
            If a node name is passed as the `scalable_entity_name` parameter
            and that node is contained (transitively) within a compute node
            and this property is 'true', operate on the compute node instead
            of the specified node.
        default: false
      ignore_failure:
        default: false
        type: boolean
      removed_ids_exclude_hint:
        description: >
            Node instances denoted by these instance ids should be *kept* if
            possible.
        default: []
      removed_ids_include_hint:
        description: >
            Node instances denoted by these instance ids should be *removed*
            if possible.
        default: []

node_types:

  cloudify.nodes.Kubernetes.Master:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/create.py
        configure:
          implementation: scripts/kubernetes_master/configure.py
        start:
          implementation: scripts/kubernetes_master/start.py

  cloudify.nodes.Kubernetes.Node:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/create.py
        configure:
          implementation: scripts/kubernetes_node/configure.py
        start:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: scripts/tasks.py
            task_name:
              default: label_node
            task_properties:
              default:
                hostname: { get_attribute: [ SELF, hostname ] }
                labels: { get_input: labels }
            fabric_env:
              default:
                host_string: { get_attribute: [ kubernetes_master_host, ip ] }
                user: { get_input: agent_user }
                key: { get_secret: agent_key_private }
        stop:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: scripts/tasks.py
            task_name:
              default: stop_node
            task_properties:
              default:
                hostname: { get_attribute: [ SELF, hostname ] }
            fabric_env:
              default:
                host_string: { get_attribute: [ kubernetes_master_host, ip ] }
                user: { get_input: agent_user }
                key: { get_secret: agent_key_private }
        delete:
          implementation: fabric.fabric_plugin.tasks.run_task
          inputs:
            tasks_file:
              default: scripts/tasks.py
            task_name:
              default: delete_node
            task_properties:
              default:
                hostname: { get_attribute: [ SELF, hostname ] }
            fabric_env:
              default:
                host_string: { get_attribute: [ kubernetes_master_host, ip ] }
                user: { get_input: agent_user }
                key: { get_secret: agent_key_private }

  cloudify.nodes.ApplicationServer.kubernetes.Node:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          # set ip and hostname and setup services
          implementation: scripts/kubernetes_common/create.py
          inputs:
            cfy_user:
              default: { get_input: cfy_user }
            cfy_password:
              default: { get_input: cfy_password }
            cfy_tenant:
              default: { get_input: cfy_tenant }
            agent_user:
              default: { get_input: agent_user }
            full_install:
              default: no
      maintenance:
        mount:
          implementation: scripts/kubernetes_common/mount.py
        unmount:
          implementation: scripts/kubernetes_common/unmount.py

  cloudify.nodes.Kubernetes.build_node:
    derived_from: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/buildtools/install.py
        configure:
          implementation: scripts/buildtools/build.py
          inputs:
            full_install:
              default: no

  cloudify.nodes.ApplicationServer.kubernetes.LoadBalancer:
    derived_from: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          # set ip and hostname and setup services
          implementation: scripts/kubernetes_common/create.py
          inputs:
            cfy_user:
              default: { get_input: cfy_user }
            cfy_password:
              default: { get_input: cfy_password }
            cfy_tenant:
              default: { get_input: cfy_tenant }
            agent_user:
              default: { get_input: agent_user }
            full_install:
              default: loadbalancer
        configure:
          implementation: scripts/kubernetes_loadbalancer/create.py
      maintenance:
        init: scripts/kubernetes_loadbalancer/init.py
        delete: scripts/kubernetes_loadbalancer/delete.py

node_templates:

  kubernetes_master:
    type: cloudify.nodes.Kubernetes.Master
    relationships:
      - type: cloudify.relationships.contained_in
        target: kubernetes_master_host

  kubernetes_master_build:
    type: cloudify.nodes.Kubernetes.build_node
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            full_install: all
    relationships:
    - target: kubernetes_master
      type: cloudify.relationships.contained_in

  kubernetes_master_services:
    type: cloudify.nodes.ApplicationServer.kubernetes.Node
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            full_install: all
    relationships:
    - target: kubernetes_master
      type: cloudify.relationships.contained_in
    # we can start only after set all properties
    - target: kubernetes_master_build
      type: cloudify.relationships.depends_on
    - target: kubernetes_node
      type: cloudify.relationships.depends_on

  kubernetes_node_build:
    type: cloudify.nodes.Kubernetes.build_node
    relationships:
    - target: kubernetes_node_host
      type: cloudify.relationships.contained_in

  kubernetes_node_services:
    type: cloudify.nodes.ApplicationServer.kubernetes.Node
    relationships:
    - target: kubernetes_node_host
      type: cloudify.relationships.contained_in
    - target: kubernetes_node_build
      type: cloudify.relationships.depends_on

  kubernetes_node:
    type: cloudify.nodes.Kubernetes.Node
    relationships:
      - type: cloudify.relationships.contained_in
        target: kubernetes_node_services
      - type: cloudify.relationships.depends_on
        target: kubernetes_master

  kubernetes_load:
    type: cloudify.nodes.ApplicationServer.kubernetes.LoadBalancer
    relationships:
    - target: kubernetes_load_host
      type: cloudify.relationships.contained_in

outputs:

  kubernetes_cluster_bootstrap_token:
    value: { get_attribute: [ kubernetes_master, bootstrap_token ] }

  kubernetes_cluster_bootstrap_hash:
    value: { get_attribute: [ kubernetes_master, bootstrap_hash ] }

  kubernetes_cluster_master_ip:
    value: { get_attribute: [ kubernetes_master, master_ip ] }

  kubernetes-admin_client_certificate_data:
    value: { get_attribute: [ kubernetes_master, kubernetes-admin_client_certificate_data ] }

  kubernetes-admin_client_key_data:
    value: { get_attribute: [ kubernetes_master, kubernetes-admin_client_key_data ] }

  kubernetes_certificate_authority_data:
    value: { get_attribute: [ kubernetes_master, kubernetes_certificate_authority_data ] }

policy_types:
  scale_policy_type:
    source: policies/scale.clj
    properties:
      policy_operates_on_group:
        default: true
      service_selector:
        description: regular expression that selects the metric to be measured
        default: ".*"
      moving_window_size:
        description: the moving window for individual sources in secs
        default: 10
      scale_threshold:
        description: the value to trigger scaling over aggregrated moving values
      scale_limit:
        description: scaling limit
        default: 10
      scale_direction:
        description: scale up ('<') or scale down ('>')
        default: '<'
      cooldown_time:
        description: the time to wait before evaluating again after a scale
        default: 60

groups: {}

#  scale_up_group:
#    members: [kubernetes_node_host]
#    policies:
#      auto_scale_up:
#        type: scale_policy_type
#        properties:
#          policy_operates_on_group: true
#          scale_limit: 6
#          scale_direction: '<'
#          scale_threshold: 30
#          service_selector: .*kubernetes_node_host.*cpu.total.user
#          cooldown_time: 60
#        triggers:
#          execute_scale_workflow:
#            type: cloudify.policies.triggers.execute_workflow
#            parameters:
#              workflow: scale
#              workflow_parameters:
#                delta: 1
#                scalable_entity_name: kubernetes_node_host

#  scale_down_group:
#    members: [kubernetes_node_host]
#    policies:
#      auto_scale_down:
#        type: scale_policy_type
#        properties:
#          policy_operates_on_group: true
#          scale_limit: 6
#          scale_direction: '<'
#          scale_threshold: 30
#          service_selector: .*kubernetes_node_host.*cpu.total.user
#          cooldown_time: 60
#        triggers:
#          execute_scale_workflow:
#            type: cloudify.policies.triggers.execute_workflow
#            parameters:
#              workflow: scale
#              workflow_parameters:
#                delta: 1
#                scalable_entity_name: kubernetes_node_host

#  heal_group:
#    members: [kubernetes_node_host]
#    policies:
#      simple_autoheal_policy:
#        type: cloudify.policies.types.host_failure
#        properties:
#          service:
#            - .*kubernetes_node_host.*.cpu.total.system
#            - .*kubernetes_node_host.*.process.hyperkube.cpu.percent
#          interval_between_workflows: 60
#        triggers:
#          auto_heal_trigger:
#            type: cloudify.policies.triggers.execute_workflow
#            parameters:
#              workflow: heal
#              workflow_parameters:
#                node_instance_id: { 'get_property': [ SELF, node_id ] }
#                diagnose_value: { 'get_property': [ SELF, diagnose ] }
