#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.

echo $@ >> /tmp/log-calls

usage() {
    err "Invalid usage. Usage: "
    err "\t$0 init"
    err "\t$0 attach <json params> <nodename>"
    err "\t$0 detach <mount device> <nodename>"
    err "\t$0 waitforattach <mount device> <json params>"
    err "\t$0 mountdevice <mount dir> <mount device> <json params>"
    err "\t$0 unmountdevice <mount dir>"
    err "\t$0 isattached <json params> <nodename>"
    exit 1
}

err() {
    echo -ne $* 1>&2
}

log() {
    echo -ne $* >&1
}

ismounted() {
    MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
    if [ "${MOUNT}" == "${MNTPATH}" ]; then
        echo "1"
    else
        echo "0"
    fi
}

getdevice() {
    VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')
    VG=$(echo ${JSON_PARAMS}|jq -r '.volumegroup')

    dd if=/dev/zero of="/tmp/${VG}-${VOLUMEID}.img" count=204800 2>/dev/null > /dev/null
    DMDEV="/tmp/${VG}-${VOLUMEID}.img"
    echo ${DMDEV}
}

attach() {
    JSON_PARAMS=$1
    DMDEV=$(getdevice)

    if [ ! -e "${DMDEV}" ]; then
        err "{\"status\": \"Failure\", \"message\": \"Volume ${VOLUMEID} does not exist\"}"
        exit 1
    fi
    log "{\"status\": \"Success\", \"device\":\"${DMDEV}\"}"
    exit 0
}

getvolumename() {
    JSON_PARAMS=$1

    VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')
    VG=$(echo ${JSON_PARAMS}|jq -r '.volumegroup')
    HOST=`hostname`

    log "{\"status\": \"Success\", \"volumeName\":\"${HOST}-${VG}-${VOLUMEID}\"}"
    exit 0
}

detach() {
    log "{\"status\": \"Success\"}"
    exit 0
}

waitforattach() {
    shift
    attach $*
}

domountdevice() {
    MNTPATH=$1
    DMDEV=$2
    FSTYPE="ext3"

    if [ ! -e "${DMDEV}" ]; then
        err "{\"status\": \"Failure\", \"message\": \"${DMDEV} does not exist\"}"
        exit 1
    fi

    if [ $(ismounted) -eq 1 ] ; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    mkfs -F -q -t ${FSTYPE} ${DMDEV} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to create fs ${FSTYPE} on device ${DMDEV}\"}"
        exit 1
    fi

    mkdir -p ${MNTPATH} &> /dev/null

    mount -o loop ${DMDEV} ${MNTPATH} &> /dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${DMDEV} at ${MNTPATH}\"}"
        exit 1
    fi
    log "{\"status\": \"Success\"}"
    exit 0
}

unmountdevice() {
    MNTPATH=$1
    if [ ! -d ${MNTPATH} ]; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    if [ $(ismounted) -eq 0 ] ; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    umount ${MNTPATH} &> /dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
        exit 1
    fi

    log "{\"status\": \"Success\"}"
    exit 0
}

isattached() {
    log "{\"status\": \"Success\", \"attached\":true}"
    exit 0
}

op=$1

if [ "$op" = "init" ]; then
    log "{\"status\": \"Success\", \"capabilities\": {\"attach\": true}}"
    exit 0
fi

if [ $# -lt 2 ]; then
    usage
fi

shift

case "$op" in
    getvolumename)
        getvolumename $*
        ;;
    attach)
        attach $*
        ;;
    detach)
        detach $*
        ;;
    waitforattach)
        waitforattach $*
        ;;
    mountdevice)
        domountdevice $*
        ;;
    unmountdevice)
        unmountdevice $*
        ;;
    isattached)
        isattached $*
        ;;
    *)
        log "{ \"status\": \"Not supported\" }"
        exit 0
esac

exit 1
